# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
orbs:
  slack: circleci/slack@3.4.2

workflows:
  version: 2
  build-then-deploy:
    jobs:
      - build
      - deploy:
          context:
            - AWS_LMHD_ROOT
            - PLURALKIT_STRAWB
          requires:
            - build
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: go get -v -t -d ./...

      # Lol, no tests yet
      - run: go test -v ./...

      # Build
      - run: make build

      - run:
          name: Check for binaries
          command: |
            ls -lah
            ls -lah bin

      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job. 
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: bin
          # Must be relative path from root
          paths:
            - hello
            - v1

  deploy:
    docker:
      - image: circleci/node:14

    working_directory: ~/repo

    steps:
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: bin

      - run:
          name: Check for binaries
          command: |
            ls -lah
            ls -lah bin

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      # Install Serverless
      - run:
          name: Install Serverless CLI and dependencies
          command: |
            sudo npm i -g serverless@1.76.1
            npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-

      # Deploy Dev
      - run:
          name: Deploy Dev
          command: make deploy-dev

      # TODO: make test-dev

      # Deploy Prod
      - run:
          name: Deploy Prod
          command: make deploy-prod

      # TODO: make test-prod

      - run: exit 0
      - slack/status:
          webhook: ${SLACK_WEBHOOK}
